{
  "name": "satellizer",
  "description": "Token-based AngularJS Authentication",
  "version": "0.11.2",
  "scripts": {
    "start": "node ./examples/server/node/server.js",
    "test": "karma start"
  },
  "main": "satellizer.min.js",
  "homepage": "https://github.com/sahat/satellizer",
  "bugs": {
    "url": "https://github.com/sahat/satellizer/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/sahat/satellizer.git"
  },
  "author": {
    "name": "Sahat Yalkabov",
    "email": "sahat@me.com",
    "url": "http://sahatyalkabov.com"
  },
  "devDependencies": {
    "gulp": "^3.8.7",
    "gulp-complexity": "~0.3.0",
    "gulp-plumber": "^0.6.4",
    "gulp-rename": "^1.2.0",
    "gulp-uglify": "~1.0.0",
    "gulp-header": "~1.2.0",
    "karma": "^0.12.21",
    "karma-coverage": "^0.2.6",
    "karma-jasmine": "^0.1.5",
    "karma-phantomjs-launcher": "^0.1.4"
  },
  "license": "MIT",
  "tags": [
    "authentication",
    "login",
    "token",
    "jwt",
    "angularjs",
    "angular",
    "auth",
    "facebook",
    "google",
    "linkedin",
    "twitter",
    "foursquare",
    "github",
    "yahoo",
    "oauth",
    "oauth 1.0",
    "oauth 2.0",
    "oauth2",
    "oauth1",
    "sign-in",
    "social"
  ],
  "readme": "![Project Logo](https://lh6.googleusercontent.com/-YmfKZZLZKL0/U-KVPFSbiOI/AAAAAAAAEZA/maoYT8iJCnA/w1089-h513-no/sshot-1.png)\n\n# [Satellizer](https://github.com/sahat/satellizer/)\n\n[![Join the chat at https://gitter.im/sahat/satellizer](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/sahat/satellizer?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Build Status](http://img.shields.io/travis/sahat/satellizer.svg?style=flat)](https://travis-ci.org/sahat/satellizer)\n[![Test Coverage](http://img.shields.io/codeclimate/coverage/github/sahat/satellizer.svg?style=flat)](https://codeclimate.com/github/sahat/satellizer)\n[![Version](http://img.shields.io/badge/version-0.11.2-orange.svg?style=flat)](https://www.npmjs.org/package/satellizer)\n\n**Live Demo:** [https://satellizer.herokuapp.com](https://satellizer.herokuapp.com)\n\n---\n\n**Satellizer** is a simple to use, end-to-end, token-based authentication module\nfor [AngularJS](http://angularjs.org) with built-in support for Google, Facebook,\nLinkedIn, Twitter, Yahoo, Windows Live authentication providers, as well as Email and Password\nsign-in. You are not limited to the sign-in options above, in fact you can add\nany *OAuth 1.0* or *OAuth 2.0* provider by passing provider-specific information\nduring the configuration step.\n\n![Screenshot](https://lh4.googleusercontent.com/-0UUIecT-3N4/U-LQJkd75iI/AAAAAAAAEZY/YN3Oe-eUPGc/w1676-h1158-no/satellizer.png)\n\n## Table of Contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Configuration](#configuration)\n- [Browser Support](#browser-support)\n- [How It Works](#how-it-works)\n- [Obtaining OAuth Keys](#obtaining-oauth-keys)\n- [API Reference](#api-reference)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Installation\n\nThe easiest way to get **Satellizer** is by running one of the following\ncommands:\n\n```bash\n# Bower\nbower install satellizer\n\n# NPM\nnpm install satellizer\n```\n\n**Note:** Alternatively, you may download the [latest release](https://github.com/sahat/satellizer/releases)\nor use the CDN:\n\n```html\n<!--[if lte IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/Base64/0.3.0/base64.min.js\"></script>\n<![endif]-->\n<script src=\"//cdn.jsdelivr.net/satellizer/0.11.2/satellizer.min.js\"></script>\n```\n\n**Note:** Sattelizer uses [window.btoa](https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/btoa) and [window.atob](https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/atob) for parsing JWT.  If you still have to support **IE9**, use the Base64 polyfill above.\n\n## Usage\n\n**Step 1. App Module**\n```js\nangular.module('MyApp', ['satellizer'])\n  .config(function($authProvider) {\n\n    $authProvider.facebook({\n      clientId: '624059410963642'\n    });\n\n    $authProvider.google({\n      clientId: '631036554609-v5hm2amv4pvico3asfi97f54sc51ji4o.apps.googleusercontent.com'\n    });\n\n    $authProvider.github({\n      clientId: '0ba2600b1dbdb756688b'\n    });\n\n    $authProvider.linkedin({\n      clientId: '77cw786yignpzj'\n    });\n\n    $authProvider.yahoo({\n      clientId: 'dj0yJmk9dkNGM0RTOHpOM0ZsJmQ9WVdrOVlVTm9hVk0wTkRRbWNHbzlNQS0tJnM9Y29uc3VtZXJzZWNyZXQmeD0wMA--'\n    });\n\n    $authProvider.live({\n      clientId: '000000004C12E68D'\n    });\n\n    $authProvider.twitter({\n      url: '/auth/twitter'\n    });\n\n    $authProvider.oauth2({\n      name: 'foursquare',\n      url: '/auth/foursquare',\n      redirectUri: window.location.origin,\n      clientId: 'MTCEJ3NGW2PNNB31WOSBFDSAD4MTHYVAZ1UKIULXZ2CVFC2K',\n      authorizationEndpoint: 'https://foursquare.com/oauth2/authenticate',\n    });\n\n  });\n```\n\n**Step 2. Controller**\n```js\nangular.module('MyApp')\n  .controller('LoginCtrl', function($scope, $auth) {\n\n    $scope.authenticate = function(provider) {\n      $auth.authenticate(provider);\n    };\n\n  });\n```\n\n**Step 3. Template**\n```html\n<button ng-click=\"authenticate('facebook')\">Sign in with Facebook</button>\n<button ng-click=\"authenticate('google')\">Sign in with Google</button>\n<button ng-click=\"authenticate('github')\">Sign in with GitHub</button>\n<button ng-click=\"authenticate('linkedin')\">Sign in with LinkedIn</button>\n<button ng-click=\"authenticate('twitter')\">Sign in with Twitter</button>\n<button ng-click=\"authenticate('foursquare')\">Sign in with Foursquare</button>\n<button ng-click=\"authenticate('yahoo')\">Sign in with Yahoo</button>\n<button ng-click=\"authenticate('live')\">Sign in with Windows Live</button>\n```\n\n**Note:** For server-side usage please refer to the [examples](https://github.com/sahat/satellizer/tree/master/examples/server)\ndirectory.\n\n## Configuration\n\nBelow is a complete listing of all default configuration options.\n\n```js\n$authProvider.httpInterceptor = true; // Add Authorization header to HTTP request\n$authProvider.loginOnSignup = true;\n$authProvider.baseUrl = '/' // API Base URL for the paths below.\n$authProvider.loginRedirect = '/';\n$authProvider.logoutRedirect = '/';\n$authProvider.signupRedirect = '/login';\n$authProvider.loginUrl = '/auth/login';\n$authProvider.signupUrl = '/auth/signup';\n$authProvider.loginRoute = '/login';\n$authProvider.signupRoute = '/signup';\n$authProvider.tokenRoot = false; // set the token parent element if the token is not the JSON root\n$authProvider.tokenName = 'token';\n$authProvider.tokenPrefix = 'satellizer'; // Local Storage name prefix\n$authProvider.unlinkUrl = '/auth/unlink/';\n$authProvider.unlinkMethod = 'get';\n$authProvider.authHeader = 'Authorization';\n$authProvider.authToken = 'Bearer';\n$authProvider.withCredentials = true;\n$authProvider.platform = 'browser'; // or 'mobile'\n$authProvider.storage = 'localStorage'; // or 'sessionStorage'\n\n// Facebook\n$authProvider.facebook({\n  url: '/auth/facebook',\n  authorizationEndpoint: 'https://www.facebook.com/v2.3/dialog/oauth',\n  redirectUri: window.location.origin || window.location.protocol + '//' + window.location.host + '/',\n  scope: 'email',\n  scopeDelimiter: ',',\n  requiredUrlParams: ['display', 'scope'],\n  display: 'popup',\n  type: '2.0',\n  popupOptions: { width: 481, height: 269 }\n});\n\n// Google\n$authProvider.google({\n  url: '/auth/google',\n  authorizationEndpoint: 'https://accounts.google.com/o/oauth2/auth',\n  redirectUri: window.location.origin || window.location.protocol + '//' + window.location.host,\n  scope: ['profile', 'email'];\n  scopePrefix: 'openid';\n  scopeDelimiter: ' ',\n  requiredUrlParams: ['scope'],\n  optionalUrlParams: ['display'],\n  display: 'popup',\n  type: '2.0',\n  popupOptions: { width: 580, height: 400 }\n});\n\n// LinkedIn\n$authProvider.linkedin({\n  url: '/auth/linkedin',\n  authorizationEndpoint: 'https://www.linkedin.com/uas/oauth2/authorization',\n  redirectUri: window.location.origin || window.location.protocol + '//' + window.location.host,\n  requiredUrlParams: ['state'],\n  scope: [],\n  scopeDelimiter: ' ',\n  state: 'STATE',\n  type: '2.0',\n  popupOptions: { width: 527, height: 582 }\n});\n\n// Twitter\n$authProvider.twitter({\n  url: '/auth/twitter',\n  type: '1.0',\n  popupOptions: { width: 495, height: 645 }\n});\n\n// GitHub\n$authProvider.github({\n  url: '/auth/github',\n  authorizationEndpoint: 'https://github.com/login/oauth/authorize',\n  redirectUri: window.location.origin || window.location.protocol + '//' + window.location.host,\n  scope: [],\n  scopeDelimiter: ' ',\n  type: '2.0',\n  popupOptions: { width: 1020, height: 618 }\n});\n\n// Windows Live\n$authProvider.live({\n  url: '/auth/live',\n  authorizationEndpoint: 'https://login.live.com/oauth20_authorize.srf',\n  redirectUri: window.location.origin || window.location.protocol + '//' + window.location.host,\n  scope: ['wl.basic'],\n  scopeDelimiter: ' ',\n  requiredUrlParams: ['display', 'scope'],\n  display: 'popup',\n  type: '2.0',\n  popupOptions: { width: 500, height: 560 }\n});\n\n// Yahoo\n$authProvider.yahoo({\n  url: '/auth/yahoo',\n  authorizationEndpoint: 'https://api.login.yahoo.com/oauth2/request_auth',\n  redirectUri: window.location.origin || window.location.protocol + '//' + window.location.host,\n  scope: [],\n  scopeDelimiter: ',',\n  type: '2.0',\n  popupOptions: { width: 559, height: 519 }\n});\n\n// OAuth 2.0\n$authProvider.oauth2({\n  url: null,\n  name: null,\n  scope: null,\n  scopeDelimiter: null,\n  clientId: null,\n  redirectUri: null,\n  popupOptions: null,\n  authorizationEndpoint: null,\n  responseParams: null,\n  requiredUrlParams: null,\n  optionalUrlParams: null,\n  defaultUrlParams: ['response_type', 'client_id', 'redirect_uri'],\n  responseType: 'code'\n});\n\n// OAuth 1.0\n$authProvider.oauth1({\n  url: null,\n  name: null,\n  popupOptions: null\n});\n```\n\n**Note:** If for some reason you are unable to send a token to\nyour server in the following format - `Authorization: Bearer <token>`, then use\n`$authProvider.authHeader` method to override this behavior, e.g. set its value to\n**x-access-token** or another custom header that your backend may require.\n\n## Not sending the JWT for specific requests \n```\n// This request will NOT send the token as it has skipAuthentication\n$http({\n  url: '/api/endpoint',\n  skipAuthorization: true\n  method: 'GET'\n});\n```\n\n## Updating storage\nTo toggle from localStorage and sessionStorage run `$auth.setStorage('sessionStorage');` or `$auth.setStorage('localStorage');`\n\n## Browser Support\n\n<table>\n  <tbody>\n    <tr>\n      <td><img src=\"http://ie.microsoft.com/testdrive/ieblog/2010/Sep/16_UserExperiencesEvolvingthebluee_23.png\" height=\"40\"></td>\n      <td><img src=\"http://img3.wikia.nocookie.net/__cb20120330024137/logopedia/images/d/d7/Google_Chrome_logo_2011.svg\" height=\"40\"></td>\n      <td><img src=\"http://media.idownloadblog.com/wp-content/uploads/2014/06/Safari-logo-OS-X-Yosemite.png\" height=\"40\"></td>\n      <td><img src=\"http://th09.deviantart.net/fs71/200H/f/2013/185/e/b/firefox_2013_vector_icon_by_thegoldenbox-d6bxsye.png\" height=\"40\"></td>\n      <td><img src=\"http://upload.wikimedia.org/wikipedia/commons/d/d4/Opera_browser_logo_2013.png\" height=\"40\"></td>\n\n    </tr>\n    <tr>\n      <td align=\"center\">9*</td>\n      <td align=\"center\">✓</td>\n      <td align=\"center\">✓</td>\n      <td align=\"center\">✓</td>\n      <td align=\"center\">✓</td>\n    </tr>\n  </tbody>\n</table>\n\n__*__ Requires [Base64.js](https://github.com/davidchambers/Base64.js/) polyfill.\n\n## How It Works\n\n**Satellizer** relies on *token-based authentication* using\n[JSON Web Tokens](https://auth0.com/blog/2014/01/07/angularjs-authentication-with-cookies-vs-token/)\ninstead of cookies. Each **Wiki** link below goes in-depth into how the\nauthentication process works.\n\n- [Login with OAuth 2.0](https://github.com/sahat/satellizer/wiki/Login-with-OAuth-2.0)\n- [Login with OAuth 1.0](https://github.com/sahat/satellizer/wiki/Login-with-OAuth-1.0)\n- [Login with Email and Password](https://github.com/sahat/satellizer/wiki/Login-with-Email-and-Password)\n- [Signup](https://github.com/sahat/satellizer/wiki/Signup)\n- [Logout](https://github.com/sahat/satellizer/wiki/Logout)\n\n**Note:** To learn more about JSON Web Token (JWT) visit [JWT.io](http://jwt.io/).\n\n## Obtaining OAuth Keys\n\n<img src=\"http://images.google.com/intl/en_ALL/images/srpr/logo6w.png\" width=\"150\">\n- Visit [Google Cloud Console](https://cloud.google.com/console/project)\n- Click **CREATE PROJECT** button\n- Enter *Project Name*, then click **CREATE**\n- Then select *APIs & auth* from the sidebar and click on *Credentials* tab\n- Click **CREATE NEW CLIENT ID** button\n - **Application Type**: Web Application\n - **Authorized Javascript origins**: *http://localhost:3000*\n - **Authorized redirect URI**: *http://localhost:3000*\n\n**Note:** Make sure you have turned on **Contacts API** and **Google+ API** in the *APIs* tab.\n\n<hr>\n\n<img src=\"http://www.doit.ba/img/facebook.jpg\" width=\"150\">\n- Visit [Facebook Developers](https://developers.facebook.com/)\n- Click **Apps > Create a New App** in the navigation bar\n- Enter *Display Name*, then choose a category, then click **Create app**\n- Click on *Settings* on the sidebar, then click **+ Add Platform**\n- Select **Website**\n- Enter *http://localhost:3000* for *Site URL*\n\n<hr>\n\n<img src=\"http://indonesia-royal.com/wp-content/uploads/2014/06/twitter-bird-square-logo.jpg\" height=\"70\">\n- Sign in at [https://apps.twitter.com](https://apps.twitter.com/)\n- Click on **Create New App**\n- Enter your *Application Name*, *Description* and *Website*\n- For **Callback URL**: *http://127.0.0.1:3000*\n- Go to **Settings** tab\n- Under *Application Type* select **Read and Write** access\n- Check the box **Allow this application to be used to Sign in with Twitter**\n- Click **Update this Twitter's applications settings**\n\n<hr>\n\n<img src=\"http://blogs.unity3d.com/wp-content/uploads/2013/12/New-Microsoft-Logo.png\" width=\"150\">\n- Visit [Live Connect App Management](http://go.microsoft.com/fwlink/p/?LinkId=193157).\n- Click on **Create application**\n- Enter an *Application name*, then click on **I accept** button\n- Go to **API Settings** tab\n- Enter a *Redirect URL*\n- Click **Save**\n- Go to **App Settings** tab to get *Client ID* and *Client Secret*\n\n> **Note:** Microsoft does not consider `localhost` or `127.0.0.1` to be a valid URL.\nAs a workaround for local development add `127.0.0.1 mylocalwebsite.net` to **/etc/hosts** file\nand specify `mylocalwebsite.net` as your *Redirect URL* on **API Settings** tab.\n\n\n## API Reference\n\n- [`$auth.login(user)`](#authloginuser)\n- [`$auth.signup(user)`](#authsignupuser)\n- [`$auth.authenticate(name, [userData])`](#authauthenticatename-userdata)\n- [`$auth.logout([redirect])`](#authlogout-redirect)\n- [`$auth.isAuthenticated()`](#authisauthenticated)\n- [`$auth.link(provider, [userData])`](#authlinkprovider-userdata)\n- [`$auth.unlink(provider)`](#authunlinkprovider)\n- [`$auth.getToken()`](#authgettoken)\n- [`$auth.getPayload()`](#authgetpayload)\n- [`$auth.setToken(token, [redirect])`](#authsettokentoken-redirect)\n- [`$auth.removeToken()`](#authremovetoken)\n\n#### `$auth.login(user)`\n\nSign in via email and password where:\n- **user** - Plain JavaScript object.\n\n##### Returns\n\n- **response** - The `$http` response object from the server.\n\n```js\n$auth.login({\n  email: $scope.email,\n  password: $scope.password\n});\n```\n\n**Note:** This method returns a promise.\n\n<hr>\n\n#### `$auth.signup(user)`\n\nCreates a local account with email and password. You can use whatever fields you want as long as\nyou implement them on the server.\n\n- **user** - Plain JavaScript object.\n\n#### Returns\n\n- **response** - The `$http` response object from the server.\n\n#### Usage\n\n```js\n$auth.signup({\n  email: $scope.email,\n  password: $scope.password\n}).then(function(response) {\n  console.log(response.data);\n});\n```\n\n**Note:** This method returns a promise.\n\n<hr>\n\n#### `$auth.authenticate(name, [userData])`\n\nStarts the *OAuth 1.0* or the *OAuth 2.0* authentication flow by opening a popup window:\n\n- **provider** - One of the built-in provider names or a custom provider name created\nvia `$authProvider.oauth1()` or `$authProvider.oauth2()` methods.\n- **userData** - Optional object for sending additional data to the server along with\n`code`, `clientId`, `redirectUri` (OAuth 2.0) or `oauth_token`, `oauth_verifier` (OAuth 1.0).\n\n#### Returns\n\n- **response** - The `$http` response object from the server.\n\n#### Usage\n\n```js\n$auth.authenticate('google').then(function(response) {\n  // Signed In.\n});\n```\n\n**Note:** This method returns a promise.\n\n<hr>\n\n#### `$auth.logout([redirect])`\n\nDeletes a JWT from Local Storage.\n\n- **redirect** - Optional URL string for redirecting after successful logout.\n\n#### Usage\n\n```js\n$auth.logout();\n```\n\n**Note:** This method returns a promise.\n\n<hr>\n\n#### `$auth.isAuthenticated()`\n\nReturns `true` if a JWT is present in Local Storage and it is not expired, otherwise returns `false`.\n\n**Note:** This method expects the [exp](http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html#expDef)\nclaim to check for the expiration time.\n\n#### Usage\n\n```js\n// Controller\n$scope.isAuthenticated = function() {\n  return $auth.isAuthenticated();\n};\n```\n\n```html\n<!-- Template -->\n<ul class=\"nav navbar-nav pull-right\" ng-if=\"!isAuthenticated()\">\n  <li><a href=\"/#/login\">Login</a></li>\n  <li><a href=\"/#/signup\">Sign up</a></li>\n</ul>\n<ul class=\"nav navbar-nav pull-right\" ng-if=\"isAuthenticated()\">\n  <li><a href=\"/#/logout\">Logout</a></li>\n</ul>\n```\n\n<hr>\n\n#### `$auth.link(provider, [userData])`\n\nLinks an OAuth provider with the signed-in account. It is practically the same as\n[$auth.authenticate()](#authauthenticatename-userdata) with the exception that it does not\nredirect to `$authProvider.loginRedirect` route path.\n\n- **provider** - One of the built-in provider names or a custom provider name created\nvia `$authProvider.oauth1()` or `$authProvider.oauth2()` methods.\n- **userData** - Optional object for sending additional data to the server along with\n`code`, `clientId`, `redirectUri` (OAuth 2.0) or `oauth_token`, `oauth_verifier` (OAuth 1.0).\n\n**Note:** Linking accounts business logic is handled entirely on the server.\n\n#### Usage\n\n```js\n$auth.link('github');\n```\n\n**Note:** This method returns a promise.\n\n<hr>\n\n#### `$auth.unlink(provider)`\n\nUnlinks an OAuth provider from the signed-in account. It sends a GET request to `/auth/unlink/:provider`.\n\n- **provider** - One of the built-in provider names or a custom provider name created\nvia `$authProvider.oauth1()` or `$authProvider.oauth2()` methods.\n\n**Note:** You can override the default *unlink path* above via `$authProvider.unlinkUrl` configuration property.\n\n**Note:** It uses `GET` method by default, but can be changed via `$authProvider.unlinkMethod = 'post'`. If you are going\nto use `POST`, **provider** obviously should be an object, not a string.\n\n#### Usage\n\n```js\n$auth.unlink('github');\n```\n\n**Note:** This method returns a promise.\n\n<hr>\n\n#### `$auth.getToken()`\n\nReturns a JWT from Local Storage.\n\n#### Usage\n\n```js\n$auth.getToken();\n// eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjEyMzQ1Njc4OTAsIm5hbWUiOiJKb2huIERvZSJ9.kRkUHzvZMWXjgB4zkO3d6P1imkdp0ogebLuxnTCiYUU\n```\n\n<hr>\n\n#### `$auth.getPayload()`\n\nReturns a JWT Claims Set, i.e. the middle part of a JSON Web Token.\n\n#### Usage\n\n```js\n$auth.getPayload();\n// { exp: 1414978281, iat: 1413765081, sub: \"544457a3eb129ee822a38fdd\" }\n```\n\n<hr>\n\n#### `$auth.setToken(token, [redirect])`\n\nSaves a JWT or an access token to Local Storage. *It uses `shared.setToken` internally.*\n\n- **token** - An object that takes a JWT (`response.data[config.tokenName]`) or an access token (`response.access_token`).\n- **redirect** - An optional boolean value that controls whether or not to redirect to `loginRedirect` route after saving a token. Defaults to `false`.\n\n<hr>\n\n#### `$auth.removeToken()`\n\nRemoves a JWT from Local Storage.\n\n\n## TODO\n\n- [ ] C# (ASP.NET 5) implementation\n- [x] Go implementation\n- [x] Java (Dropwizard) implementation\n- [x] Node.js (Express) implementation\n- [x] PHP (Laravel) implementation\n- [x] Python (Flask) implementation\n- [x] Ruby (Ruby on Rails) implementation\n\n## Contributing\n\nFound a typo or a bug? Send a pull request. I would especially appreciate pull\nrequests for server-side examples since I do not have much experience with any\nof the languages on the *TODO* list.\n\n## Credits\n\nA big thanks goes to [Alice Chen](https://github.com/chena) for all your hard work\non the [Dropwizard](https://dropwizard.github.io) implementation and\n[Jesús Rodríguez](https://github.com/Foxandxss) for being so proactive and actively\nreporting bugs.\n\nAdditionally, I would like to thank all other contributors who have submitted\nissues and/or pull requests!\n\nSatellizer was inspired by [ng-token-auth](https://github.com/lynndylanhurley/ng-token-auth)\nand [torii](https://github.com/Vestorly/torii) and [angular-oauth](https://github.com/enginous/angular-oauth).\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2015 Sahat Yalkabov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "satellizer@0.11.2",
  "dist": {
    "shasum": "f0da3c2a662a52b2359f0c79866c77769c1bc184"
  },
  "_from": "satellizer@",
  "_resolved": "https://registry.npmjs.org/satellizer/-/satellizer-0.11.2.tgz"
}
